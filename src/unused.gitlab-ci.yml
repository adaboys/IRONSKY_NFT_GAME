# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml


# List of stages for jobs, and their order of execution
stages:
  - build
  - test
  - deploy


# [Build stage]
# This job runs in the build stage, which runs first.
build-job:
  stage: build
  script:
    - echo "Done build the code."


# [Test stage]
# This job runs in the test stage.
# It only starts when the job in the build stage completes successfully.
unit-test-job:
  stage: test
  script:
    - echo "Done unit tests."

# This job also runs in the test stage.
# It can run at the same time as unit-test-job (in parallel).
lint-test-job:
  stage: test
  script:
    - echo "Done linting code."


# [Deploy stage]
# This job runs in the deploy stage.
# It only runs when *both* jobs in the test stage complete successfully.
deploy-job:
  stage: deploy
  script:
    - echo "Deploying application..."
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y && apt-get --yes install git ssh )'
    - mkdir -p ~/.ssh
    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    # Add the SSH key stored in Gitlab variable to the agent store
    - ssh-add <(echo "$EC2_API_SERVER_SSH_PRIVATE_KEY")
    # Run command via SSH connection
    - ssh -o StrictHostKeyChecking=no $EC2_API_SERVER_SSH_CONNECTION_URL "/var/www/ironsky/marketplace/local/deploy.sh"
    - echo "Application successfully deployed."
